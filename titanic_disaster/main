#!/usr/bin/ruby
require './../src/RbLearning'
require 'matplotlib/pyplot'

include Statistics
include Utils

train = DataManager.new("./input/train.csv")
train.remove('PassengerId')
res = train.remove('Survived')


tests = DataManager.new("./input/test.csv")
tests.remove('PassengerId')

sts = ["Don", "Rev", "Dr", "Sir", "theCountess", "Mme", "Ms", "Lady", "Jonkheer", "Mlle", "Major"]

train['Status'] = train['Name'].map do |n|
	status, l_name = n.split(',').last.split('.')
 	(sts.include? status.gsub!(' ', '') ) ? "Rare" : status
end

tests['Status'] = tests['Name'].map do |n|
	status, l_name = n.split(',').last.split('.')
	(sts.include? status.gsub!(' ', '') ) ? "Rare" : status
end


train['Family_size'] = (0...res.size).map do |n|
	train['SibSp'][n].to_i + train['Parch'][n].to_i
end

tests['Family_size'] = (0...res.size).map do |n|
	tests['SibSp'][n].to_i + tests['Parch'][n].to_i
end

train['Alone'] = (0...res.size).map do |n|
	train['Family_size'][n] > 0 ? 0 : 1
end

tests['Alone'] = (0...res.size).map do |n|
	train['Family_size'][n] > 0 ? 0 : 1
end

train['Age'] = train['Age'].map.each_with_index do |n, i|
	if n.nil?
		if train['Status'][i] == 'Miss' || train['Status'][i] == 'Master'
			'child'
		elsif train['Parch'][i].to_i == 0 || train['Name'][i].include?(')')
			'adult'
		else
			'elder'
		end
	elsif n.to_f < 18
		'child'
	elsif n.to_f > 50
		'elder'
	else
		'adult'
	end
end

tests['Age'] = tests['Age'].map.each_with_index do |n, i|
	if n.nil?
		if train['Status'][i] == 'Miss' || train['Status'][i] == 'Master'
			'child'
		elsif train['Parch'][i].to_i == 0 || train['Name'][i].include?(')')
			'adult'
		else
			'elder'
		end
	elsif n.to_f < 18
		'child'
	elsif n.to_f > 50
		'elder'
	else
		'adult'
	end
end

train['isAdult'] = train['Age'].map do |a|
	a == 'child' ? 1 : 0
end

tests['isAdult'] = tests['Age'].map do |a|
	a == 'child' ? 1 : 0
end

train['Fare'] = train['Fare'].map.each_with_index do |fare, i|
	if fare.nil?
		nil
	elsif fare.to_i < 15
		'low'
	elsif fare.to_i <= 14.454
		'medium_low'
	elsif fare.to_i <= 52
		'medium'
	elsif fare.to_i <= 90
		'medium_hight'
	else
		'hight'
	end
end

tests['Fare'] = tests['Fare'].map.each_with_index do |fare, i|
	if fare.nil?
		nil
	elsif fare.to_i < 15
		'low'
	elsif fare.to_i <= 14.454
		'medium_low'
	elsif fare.to_i <= 52
		'medium'
	elsif fare.to_i <= 90
		'medium_hight'
	else
		'hight'
	end
end

# train['Ticket'] = train['Ticket'].map do |n|
# 	ticket, num = n.split(' ')
# 	is_numeric?(ticket) ? "Unknonw" : ticket
# end

# tests['Ticket'] = tests['Ticket'].map do |n|
# 	ticket, num = n.split(' ')
# 	is_numeric?(ticket) ? "Unknonw" : ticket
# end

train['Cabin'] = train['Cabin'].map.each_with_index do |a, i|
	if a.nil?
		if train['Fare'][i].to_i< 16
		       "G"
		elsif train['Fare'][i].to_i >= 16 and train['Fare'][i].to_i < 27
		         "F"
		elsif train['Fare'][i].to_i >= 27 and train['Fare'][i].to_i < 38
		         "T"
		elsif train['Fare'][i].to_i >= 38 and train['Fare'][i].to_i < 47
		   "A"
		elsif train['Fare'][i].to_i >= 47 and train['Fare'][i].to_i < 53
		         "E"
		elsif train['Fare'][i].to_i >= 53 and train['Fare'][i].to_i < 54
		         "D"
		elsif train['Fare'][i].to_i >= 54 and train['Fare'][i].to_i < 116
		         'C'
		else
		         "B"
		end
	else
		a.split('').first
	end
end

tests['Cabin'] = tests['Cabin'].map.each_with_index do |a, i|
	if a.nil?
	if train['Fare'][i].to_i< 16
		       "G"
		elsif train['Fare'][i].to_i>= 16 and train['Fare'][i].to_i< 27
		         "F"
		elsif train['Fare'][i].to_i>= 27 and train['Fare'][i].to_i< 38
		         "T"
		elsif train['Fare'][i].to_i>= 38 and train['Fare'][i].to_i< 47
		   	"A"
		elsif train['Fare'][i].to_i>= 47 and train['Fare'][i].to_i<53
		         "E"
		elsif train['Fare'][i].to_i>= 53 and train['Fare'][i].to_i<54
		         "D"
		elsif train['Fare'][i].to_i>= 54 and train['Fare'][i].to_i< 116
		         'C'
		else
		         "B"
		end
	else
		a.split('').first
	end
end

train.remove('Name')
tests.remove('Name')
train.remove('Ticket')
tests.remove('Ticket')
# train.remove('Embarked')
# tests.remove('Embarked')
# train.remove('Cabin')
# tests.remove('Cabin')
# train.remove('Age')
# tests.remove('Age')
train.remove('Fare')
tests.remove('Fare')

train.addDumies
tests.addDumies

# train.labels.each do |l|
# 	puts l + ": " + corelation(res, train[l]).to_s
# end
# exit

train.normalize
tests.normalize

train.labels.each { |l| train.remove(l) if tests[l].nil?  }
tests.labels.each { |l| tests.remove(l) if train[l].nil?  }


nn = NeuroNet.new

m = train.matrixGenerate(tests.labels)


l1 = NetLayer.new(m.size_x, 42, 'reLu', 0.001)
l2 = NetLayer.new(42, 1, 'sigmoid', 0.001)
# l3 = NetLayer.new(12, 1, 'sigmoid', 0.001)
# l4 = NetLayer.new(8, 1, 'sigmoid', 0.005)


# layers = [l1]
layers = [l1, l2]
# layers = [l1, l2, l3]
# layers = [l1, l2, l3, l4]
# layers = [l1, l2, l3, l4, l5, l6, l7]

data_y = Matrix.set(res.map do |i|
	[i.to_i]
end)


(0...6000).each do |ep|
	batch_x, batch_y = train.batch(data_y, 32)
	it = data_y.size_y / batch_x.size_y
	(0...it).each do |i|
		printF =  i % 1 == 0
		layers = nn.train(layers, batch_x, batch_y, printF)
		puts "epoch: #{ep} iteration: #{i}"
	end
end

(0...1).each do |ep|
	# batch_x, batch_y = train.batch(data_y, 42)
	(0...10000).each do |i|
		printF =  i % 1 == 0
		layers = nn.train(layers, m, data_y, printF)
		puts "epoch: #{ep} iteration: #{i}"
	end
end

m = tests.matrixGenerate(train.labels)

x = Matrix.setVectorizedMatrix(m[0...m.size_y * m.size_x], m.size_y, m.size_x)

zs, pred = nn.feedForward(layers, x)

CSV.open("./res4.csv", "wb") do |csv|
	csv << ['PassengerId', 'Survived']
	m = pred.last.get2DArr
	(0...pred.last.size_y).each do |i|
		csv <<  [891 + i + 1, m[i][0].round]
	end
end
