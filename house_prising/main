#!/usr/bin/ruby

require './../src/RbLearning'
require 'csv'

train = DataManager.new("./input/train.csv")
tests = DataManager.new("./input/test.csv")
train.remove('Id')
tests.remove('Id')
data_y = train.remove('SalePrice')

# train.normalize
# tests.normalize

tests.addDumies
train.addDumies

# lol = true

# while lol
# 	lol = false
# 	tests.labels.each do |l|
# 		if tests.skewness(tests[l]).abs > 1
# 			tests[l].map! {|val| val.to_f > 0 ? Math.log(val.to_f) : 0 }
# 			train[l].map! {|val| val.to_f > 0 ? Math.log(val.to_f) : 0 } if train[l]
# 			lol = true
# 		end
# 	end
# end

# lol = true

# while lol
# 	lol = false
# 	tests.labels.each do |l|
# 		if tests.skewness(tests[l]).abs > 1
# 			tests[l].map! {|val| val.to_f > 0 ? Math.log(val.to_f) : 0 }
# 			train[l].map! {|val| val.to_f > 0 ? Math.log(val.to_f) : 0 } if train[l]
# 			lol = true
# 		end
# 	end
# end

mat = train.matrixGenerate(tests.labels)
pred = tests.matrixGenerate(train.labels)

res = Matrix.set(data_y.map { |v| [v.to_f == 0 ? 0 : Math.log(v.to_f)] })
coefs = poylnomialRegression(mat, res)

puts "error: #{leastSquaredError(mat, coefs, res)}"
res = getPrediction(pred, coefs)

res = res.map { |v| v == 0 ? 0 : Math.exp(v.to_f) }
puts "standard deviation prediction: #{tests.std_dev(res)}"
puts "Mean preditction: #{tests.mean(res)}"

CSV.open("./result3.csv", "wb") do |csv|
	csv << ['Id', 'SalePrice']
	res.each_with_index do |val, i|
		csv << [i + 1461, val]
	end
end
